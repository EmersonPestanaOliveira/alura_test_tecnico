// Mocks generated by Mockito 5.4.4 from annotations
// in technical_project/test/mocks/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:technical_project/core/imports_core.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResponse_0<T> extends _i1.SmartFake implements _i2.Response<T> {
  _FakeResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCategoryState_1 extends _i1.SmartFake implements _i2.CategoryState {
  _FakeCategoryState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProductState_2 extends _i1.SmartFake implements _i2.ProductState {
  _FakeProductState_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiService extends _i1.Mock implements _i2.ApiService {
  MockApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i2.Response<dynamic>> get(String? url) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
        ),
        returnValue:
            _i3.Future<_i2.Response<dynamic>>.value(_FakeResponse_0<dynamic>(
          this,
          Invocation.method(
            #get,
            [url],
          ),
        )),
      ) as _i3.Future<_i2.Response<dynamic>>);
}

/// A class which mocks [CategoryService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCategoryService extends _i1.Mock implements _i2.CategoryService {
  MockCategoryService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i2.Category>> fetchCategories() => (super.noSuchMethod(
        Invocation.method(
          #fetchCategories,
          [],
        ),
        returnValue: _i3.Future<List<_i2.Category>>.value(<_i2.Category>[]),
      ) as _i3.Future<List<_i2.Category>>);
}

/// A class which mocks [ProductService].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductService extends _i1.Mock implements _i2.ProductService {
  MockProductService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i2.Product>> fetchProducts() => (super.noSuchMethod(
        Invocation.method(
          #fetchProducts,
          [],
        ),
        returnValue: _i3.Future<List<_i2.Product>>.value(<_i2.Product>[]),
      ) as _i3.Future<List<_i2.Product>>);
}

/// A class which mocks [CategoryController].
///
/// See the documentation for Mockito's code generation for more information.
class MockCategoryController extends _i1.Mock
    implements _i2.CategoryController {
  MockCategoryController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i2.Category>> fetchCategories() => (super.noSuchMethod(
        Invocation.method(
          #fetchCategories,
          [],
        ),
        returnValue: _i3.Future<List<_i2.Category>>.value(<_i2.Category>[]),
      ) as _i3.Future<List<_i2.Category>>);

  @override
  List<_i2.Category> parseCategories(dynamic response) => (super.noSuchMethod(
        Invocation.method(
          #parseCategories,
          [response],
        ),
        returnValue: <_i2.Category>[],
      ) as List<_i2.Category>);
}

/// A class which mocks [ProductController].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductController extends _i1.Mock implements _i2.ProductController {
  MockProductController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i2.Product>> getProducts() => (super.noSuchMethod(
        Invocation.method(
          #getProducts,
          [],
        ),
        returnValue: _i3.Future<List<_i2.Product>>.value(<_i2.Product>[]),
      ) as _i3.Future<List<_i2.Product>>);

  @override
  List<_i2.Product> filterProductsByName(
    List<_i2.Product>? products,
    String? query,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #filterProductsByName,
          [
            products,
            query,
          ],
        ),
        returnValue: <_i2.Product>[],
      ) as List<_i2.Product>);

  @override
  List<_i2.Product> filterProductsByCategory(
    List<_i2.Product>? products,
    int? id,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #filterProductsByCategory,
          [
            products,
            id,
          ],
        ),
        returnValue: <_i2.Product>[],
      ) as List<_i2.Product>);

  @override
  List<_i2.Product> filterProducts(
    List<_i2.Product>? products, {
    String? nameQuery,
    int? categoryId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #filterProducts,
          [products],
          {
            #nameQuery: nameQuery,
            #categoryId: categoryId,
          },
        ),
        returnValue: <_i2.Product>[],
      ) as List<_i2.Product>);
}

/// A class which mocks [CategoryCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockCategoryCubit extends _i1.Mock implements _i2.CategoryCubit {
  MockCategoryCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CategoryState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeCategoryState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.CategoryState);

  @override
  _i3.Stream<_i2.CategoryState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i3.Stream<_i2.CategoryState>.empty(),
      ) as _i3.Stream<_i2.CategoryState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i3.Future<void> fetchCategories() => (super.noSuchMethod(
        Invocation.method(
          #fetchCategories,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  void emit(_i2.CategoryState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i2.Change<_i2.CategoryState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [ProductCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductCubit extends _i1.Mock implements _i2.ProductCubit {
  MockProductCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProductState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeProductState_2(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.ProductState);

  @override
  _i3.Stream<_i2.ProductState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i3.Stream<_i2.ProductState>.empty(),
      ) as _i3.Stream<_i2.ProductState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i3.Future<void> fetchProducts() => (super.noSuchMethod(
        Invocation.method(
          #fetchProducts,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  void increaseItemsToShow() => super.noSuchMethod(
        Invocation.method(
          #increaseItemsToShow,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool allItemsDisplayed() => (super.noSuchMethod(
        Invocation.method(
          #allItemsDisplayed,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  void filterProducts(String? query) => super.noSuchMethod(
        Invocation.method(
          #filterProducts,
          [query],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void filterProductsById(int? id) => super.noSuchMethod(
        Invocation.method(
          #filterProductsById,
          [id],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void filterProductsByNameAndId({
    String? nameQuery,
    int? id,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #filterProductsByNameAndId,
          [],
          {
            #nameQuery: nameQuery,
            #id: id,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i2.ProductState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i2.Change<_i2.ProductState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
